name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
          SECRET_KEY: test-secret-key
        run: |
          pytest tests/ -v --cov=app --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend

  # Frontend Build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint
        working-directory: ./frontend
        run: npm run lint

      - name: Build
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: npm run build

  # Docker Build - DISABLED (uncomment to enable)
  # docker-build:
  #   name: Build Docker Images
  #   runs-on: ubuntu-latest
  #   needs: [backend-test, frontend-build]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #
  #   permissions:
  #     contents: read
  #     packages: write
  #
  #   strategy:
  #     matrix:
  #       service: [frontend, backend]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Log in to Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=sha,prefix={{branch}}-
  #
  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./${{ matrix.service }}
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # Deploy to staging - DISABLED
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
  #   environment:
  #     name: staging
  #     url: https://staging.your-domain.com
  #
  #   steps:
  #     - name: Deploy to staging server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.STAGING_HOST }}
  #         username: ${{ secrets.STAGING_USER }}
  #         key: ${{ secrets.STAGING_SSH_KEY }}
  #         script: |
  #           cd /var/www/astrology-staging
  #           git pull origin develop
  #           docker-compose pull
  #           docker-compose up -d
  #           docker-compose exec -T backend alembic upgrade head

  # Deploy to production - DISABLED
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment:
  #     name: production
  #     url: https://your-domain.com
  #
  #   steps:
  #     - name: Deploy to production server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.PRODUCTION_HOST }}
  #         username: ${{ secrets.PRODUCTION_USER }}
  #         key: ${{ secrets.PRODUCTION_SSH_KEY }}
  #         script: |
  #           cd /var/www/astrology
  #           git pull origin main
  #           docker-compose pull
  #           docker-compose up -d
  #           docker-compose exec -T backend alembic upgrade head
  #
  #     - name: Notify deployment
  #       if: success()
  #       run: echo "Deployment successful!"
